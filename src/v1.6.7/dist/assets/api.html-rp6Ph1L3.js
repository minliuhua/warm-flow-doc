import{_ as i,a}from"./bewteentwo-CUNUzjUV.js";import{_ as d,e as s,p as n,l as o}from"./app-e3DKOkdu.js";const l={};function r(h,e){return o(),s("div",null,e[0]||(e[0]=[n('<h1 id="核心接口api" tabindex="-1"><a class="header-anchor" href="#核心接口api"><span>核心接口api</span></a></h1><div class="wwads-cn wwads-vertical wwads-sticky" data-id="349" style="max-width:180px;"></div><div class="between-header"><a href="https://gitee.com/dromara/warm-flow"><img src="'+i+'" alt="warm-flow Logo"></a></div><div style="display:flex;"><div class="between-left"><a href="https://gitee.com/dromara/warm-flow"><img src="'+a+'" alt="warm-flow Logo"></a></div><div class="between-right"><a href="https://gitee.com/dromara/warm-flow"><img src="'+a+'" alt="warm-flow Logo"></a></div></div><h2 id="defservice流程定义" tabindex="-1"><a class="header-anchor" href="#defservice流程定义"><span>DefService流程定义</span></a></h2><h3 id="导入流程输入流" tabindex="-1"><a class="header-anchor" href="#导入流程输入流"><span>导入流程输入流</span></a></h3><p><code>importIs(is)</code>：流程定义的输入流</p><h3 id="导入流程json字符串" tabindex="-1"><a class="header-anchor" href="#导入流程json字符串"><span>导入流程json字符串</span></a></h3><p><code>importJson(defStr)</code>：流程定义defJson的json字符串</p><h3 id="导入流程json对象" tabindex="-1"><a class="header-anchor" href="#导入流程json对象"><span>导入流程json对象</span></a></h3><p><code>importDef(defJson)</code>：流程定义json对象</p><h3 id="新增流程" tabindex="-1"><a class="header-anchor" href="#新增流程"><span>新增流程</span></a></h3><p><code>saveAndInitNode(definition)</code>：新增流程定义，并初始化流程节点和流程跳转数据</p><h3 id="只新增流程定义表数据" tabindex="-1"><a class="header-anchor" href="#只新增流程定义表数据"><span>只新增流程定义表数据</span></a></h3><p><code>checkAndSave(definition)</code>：流程定义对象</p><h3 id="保存流程节点和跳转" tabindex="-1"><a class="header-anchor" href="#保存流程节点和跳转"><span>保存流程节点和跳转</span></a></h3><p><code>saveDef(defJson)</code>：流程定义json对象</p><h3 id="导出流程定义json字符串" tabindex="-1"><a class="header-anchor" href="#导出流程定义json字符串"><span>导出流程定义json字符串</span></a></h3><p><code>exportJson(id)</code>： 导出流程定义(流程定义、流程节点和流程跳转数据)的json字符串</p><h3 id="获取流程定义全部数据对象" tabindex="-1"><a class="header-anchor" href="#获取流程定义全部数据对象"><span>获取流程定义全部数据对象</span></a></h3><p><code>getAllDataDefinition(id)</code>： 获取流程定义全部数据(包含节点和跳转)</p><h3 id="查询流程设计所需的数据" tabindex="-1"><a class="header-anchor" href="#查询流程设计所需的数据"><span>查询流程设计所需的数据</span></a></h3><p><code>queryDesign(id)</code>： 查询流程设计所需的数据，比如流程图渲染</p><h3 id="更新流程定义发布状态" tabindex="-1"><a class="header-anchor" href="#更新流程定义发布状态"><span>更新流程定义发布状态</span></a></h3><p><code>updatePublishStatus(defIds, publishStatus)</code>：</p><ul><li>defIds: 流程定义id列表 [必传]</li><li>publishStatus: 流程定义发布状态 [必传]</li></ul><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h3><p><code>removeDef(ids)</code>： 删除流程定义相关数据</p><h3 id="发布" tabindex="-1"><a class="header-anchor" href="#发布"><span>发布</span></a></h3><p><code>publish(id)</code>： 发布流程定义</p><h3 id="取消发布" tabindex="-1"><a class="header-anchor" href="#取消发布"><span>取消发布</span></a></h3><p><code>unPublish(id)</code>： 取消发布流程定义</p><h3 id="复制流程" tabindex="-1"><a class="header-anchor" href="#复制流程"><span>复制流程</span></a></h3><p><code>copyDef(id)</code>： 复制流程定义</p><h3 id="激活流程" tabindex="-1"><a class="header-anchor" href="#激活流程"><span>激活流程</span></a></h3><p><code>active(id)</code>： 激活流程</p><h3 id="挂起流程" tabindex="-1"><a class="header-anchor" href="#挂起流程"><span>挂起流程</span></a></h3><p><code>unActive(id)</code>： 挂起流程：流程定义挂起后，相关的流程实例都无法继续流转</p><h2 id="chartservice流程图绘制接口" tabindex="-1"><a class="header-anchor" href="#chartservice流程图绘制接口"><span>ChartService流程图绘制接口</span></a></h2><h3 id="流程图-渲染状态" tabindex="-1"><a class="header-anchor" href="#流程图-渲染状态"><span>流程图(渲染状态)</span></a></h3><p><code>chartIns(instanceId)</code>：根据流程实例ID,获取流程图的图片流(渲染状态)</p><ul><li>instanceId: 流程实例id [必传]</li><li>返回值：base64编码的图片流字符串，流程实例开启后，流程图元数据存储在实例表中的def_json字段中</li></ul><h3 id="流程图-不渲染状态" tabindex="-1"><a class="header-anchor" href="#流程图-不渲染状态"><span>流程图(不渲染状态)</span></a></h3><p><code>chartDef(definitionId)</code>：根据流程定义ID,获取流程图的图片流(不渲染状态), 返回base64编码的图片流字符串</p><h3 id="流程图-渲染状态-可扩展" tabindex="-1"><a class="header-anchor" href="#流程图-渲染状态-可扩展"><span>流程图(渲染状态)-可扩展</span></a></h3><p><code>chartIns(instanceId)</code>：根据流程实例ID,获取流程图的图片流(渲染状态)</p><ul><li>instanceId: 流程实例id [必传]</li><li>consumer: 可获取流程图对象，可用于修改流程图样式或者新增内容 [按需传输]</li><li>返回值：base64编码的图片流字符串，流程实例开启后，流程图元数据存储在实例表中的def_json字段中</li></ul><h3 id="流程图-不渲染状态-可扩展" tabindex="-1"><a class="header-anchor" href="#流程图-不渲染状态-可扩展"><span>流程图(不渲染状态)-可扩展</span></a></h3><p><code>chartDef(definitionId)</code>：根据流程实例ID,获取流程图的图片流(不渲染状态), 返回base64编码的图片流字符串</p><ul><li>instanceId: 流程实例id [必传]</li><li>consumer: 可获取流程图对象，可用于修改流程图样式或者新增内容 [按需传输]</li></ul><h3 id="流程图-渲染状态-自行渲染" tabindex="-1"><a class="header-anchor" href="#流程图-渲染状态-自行渲染"><span>流程图(渲染状态)-自行渲染</span></a></h3><p><code>chartInsObj(instanceId)</code>：根据流程实例ID,获取流程图对象</p><ul><li>instanceId: 流程实例id [必传]</li><li>返回值：base64编码的图片流字符串，流程实例开启后，流程图元数据存储在实例表中的def_json字段中</li></ul><h3 id="流程图-不渲染状态-自行渲染" tabindex="-1"><a class="header-anchor" href="#流程图-不渲染状态-自行渲染"><span>流程图(不渲染状态)-自行渲染</span></a></h3><p><code>chartDefObj(definitionId)</code>：根据流程定义ID,获取流程图对象</p><h2 id="insservice流程实例" tabindex="-1"><a class="header-anchor" href="#insservice流程实例"><span>InsService流程实例</span></a></h2><h3 id="开启流程" tabindex="-1"><a class="header-anchor" href="#开启流程"><span>开启流程</span></a></h3><p><code>start(businessId, flowParams)</code>：传入业务id，开启流程实例。flowParams包含如下字段：</p><ul><li>flowCode: 流程编码 [必传]</li><li>handler: 办理人唯一标识 [建议传]</li><li>variable: 流程变量 [按需传输]</li><li>ext: 扩展字段，预留给业务系统使用 [按需传输]</li><li>flowStatus: 流程状态，自定义流程状态[按需传输]</li></ul><h3 id="流程跳转" tabindex="-1"><a class="header-anchor" href="#流程跳转"><span>流程跳转</span></a></h3><p><code>skipByInsId(instanceId, flowParams)</code>：传入流程实例id，流程跳转。flowParams包含如下字段：</p><ul><li>skipType: 跳转类型(PASS审批通过 REJECT退回) [必传]</li><li>nodeCode: 节点编码,如果指定节点,可任意跳转到对应节点 [按需传输]</li><li>permissionFlag: 办理人权限标识，比如用户，角色，部门等, 流程设计时未设置办理人或者ignore为true可不传 [按需传输]</li><li>message: 审批意见 [按需传输]</li><li>handler: 办理人唯一标识 [建议传]</li><li>variable: 流程变量 [按需传输]</li><li>flowStatus: 流程状态，自定义流程状态 [按需传输]</li><li>ignore: 办理是忽略权限校验，默认不忽略（true：忽略，false：不忽略）[按需传输]</li></ul><h3 id="终止流程" tabindex="-1"><a class="header-anchor" href="#终止流程"><span>终止流程</span></a></h3><p><code>termination(instanceId, flowParams)</code>：传入流程实例id，终止流程。flowParams包含如下字段：</p><ul><li>handler: 办理人唯一标识 [建议传]</li><li>message: 审批意见 [按需传输]</li><li>flowStatus: 流程状态，自定义流程状态 [按需传输]</li><li>permissionFlag: 办理人权限标识，比如用户，角色，部门等，不传不校验权限 [按需传输]</li><li>ignore: 忽略权限校验（比如管理员不校验），默认不忽略 [按需传输]</li></ul><h3 id="删除流程实例" tabindex="-1"><a class="header-anchor" href="#删除流程实例"><span>删除流程实例</span></a></h3><p><code>remove(instanceIds)</code>：根据实例ids，删除流程</p><h3 id="激活实例" tabindex="-1"><a class="header-anchor" href="#激活实例"><span>激活实例</span></a></h3><p><code>active(Long id)</code>： 激活实例</p><h3 id="挂起实例" tabindex="-1"><a class="header-anchor" href="#挂起实例"><span>挂起实例</span></a></h3><p><code>unActive(Long id)</code>： 挂起实例，流程实例挂起后，该流程实例无法继续流转</p><h3 id="查询流程实例集合" tabindex="-1"><a class="header-anchor" href="#查询流程实例集合"><span>查询流程实例集合</span></a></h3><p><code>listByDefIds(defIds)</code>：根据流程定义id集合，查询流程实例集合</p><h2 id="taskservice待办任务" tabindex="-1"><a class="header-anchor" href="#taskservice待办任务"><span>TaskService待办任务</span></a></h2><h3 id="流程跳转-1" tabindex="-1"><a class="header-anchor" href="#流程跳转-1"><span>流程跳转</span></a></h3><p><code>skip(taskId, flowParams)</code>：传入流程任务id，流程跳转。flowParams包含如下字段：</p><ul><li>skipType: 跳转类型(PASS审批通过 REJECT退回) [必传]</li><li>nodeCode: 节点编码，如果指定节点,可任意跳转到对应节点 [按需传输]</li><li>permissionFlag: 办理人权限标识，比如用户，角色，部门等, 流程设计时未设置办理人或者ignore为true可不传 [按需传输]</li><li>message: 审批意见 [按需传输]</li><li>handler: 办理人唯一标识 [建议传]</li><li>variable: 流程变量 [按需传输]</li><li>flowStatus: 流程状态，自定义流程状态 [按需传输]</li><li>ignore: 忽略权限校验（比如管理员不校验），默认不忽略 [按需传输]</li></ul><h3 id="终止流程-1" tabindex="-1"><a class="header-anchor" href="#终止流程-1"><span>终止流程</span></a></h3><p><code>termination(taskId, flowParams)</code>：传入流程任务id，终止流程。flowParams包含如下字段：</p><ul><li>message: 审批意见 [按需传输]</li><li>handler: 办理人唯一标识 [建议传]</li><li>flowStatus: 流程状态，自定义流程状态 [按需传输]</li><li>permissionFlag: 办理人权限标识，比如用户，角色，部门等，不传不校验权限 [按需传输]</li><li>ignore: 忽略权限校验（比如管理员不校验），默认不忽略 [按需传输]</li></ul><h3 id="转办" tabindex="-1"><a class="header-anchor" href="#转办"><span>转办</span></a></h3><p><code>transfer(taskId, flowParams)</code>：转办, 默认删除当然办理用户权限，转办后，当前办理不可办理。flowParams包含如下字段：</p><ul><li>handler: 当前办理人唯一标识 [必传]</li><li>permissionFlag: 用户所拥有的权限标识[按需传输，ignore为false，则必传]</li><li>addHandlers: 转办对象 [必传]</li><li>message: 审批意见 [按需传输]</li><li>ignore: 忽略权限校验（比如管理员不校验），默认不忽略 [按需传输]</li></ul><h3 id="委派" tabindex="-1"><a class="header-anchor" href="#委派"><span>委派</span></a></h3><p><code>depute(taskId, flowParams)</code>：委派, 默认删除当然办理用户权限，委派后，当前办理不可办理。flowParams包含如下字段：</p><ul><li>handler: 当前办理人唯一标识 [必传]</li><li>permissionFlag: 用户所拥有的权限标识[按需传输，ignore为false，则必传]</li><li>addHandlers: 委托对象 [必传]</li><li>message: 审批意见 [按需传输]</li><li>ignore: 忽略权限校验（比如管理员不校验），默认不忽略 [按需传输]</li></ul><h3 id="加签" tabindex="-1"><a class="header-anchor" href="#加签"><span>加签</span></a></h3><p><code>addSignature(taskId, flowParams)</code>：加签，增加办理人。flowParams包含如下字段：</p><ul><li>handler: 当前办理人唯一标识 [必传]</li><li>permissionFlag: 用户所拥有的权限标识[按需传输，ignore为false，则必传]</li><li>addHandlers: 加签对象 [必传]</li><li>message: 审批意见 [按需传输]</li><li>ignore: 忽略权限校验（比如管理员不校验），默认不忽略 [按需传输]</li></ul><h3 id="减签" tabindex="-1"><a class="header-anchor" href="#减签"><span>减签</span></a></h3><p><code>reductionSignature(taskId, flowParams)</code>：减签，减少办理人。flowParams包含如下字段：</p><ul><li>handler: 当前办理人唯一标识 [必传]</li><li>permissionFlag: 用户所拥有的权限标识[按需传输，ignore为false，则必传]</li><li>reductionHandlers: 减少办理人 [必传]</li><li>message: 审批意见 [按需传输]</li><li>ignore: 忽略权限校验（比如管理员不校验），默认不忽略 [按需传输]</li></ul><h3 id="修改办理人" tabindex="-1"><a class="header-anchor" href="#修改办理人"><span>修改办理人</span></a></h3><p><code>updateHandler(taskId, flowParams)</code>：传入流程任务id，修改办理人</p><ul><li>handler: 办理人唯一标识 [按需传输]</li><li>permissionFlag: 用户所拥有的权限标识 [按需传输，ignore为false，则必传]</li><li>addHandlers: 增加办理人：加签，转办，委托 [按需传输]</li><li>reductionHandlers: 减少办理人：减签，委托 [按需传输]</li><li>message: 审批意见 [按需传输]</li><li>cooperateType: 协作方式(2转办 3委派 6加签 7减签）[按需传输]</li><li>ignore: 转办忽略权限校验（true：忽略，false：不忽略）[按需传输]</li></ul><h2 id="nodeservice流程节点" tabindex="-1"><a class="header-anchor" href="#nodeservice流程节点"><span>NodeService流程节点</span></a></h2><h3 id="获取已发布流程节点" tabindex="-1"><a class="header-anchor" href="#获取已发布流程节点"><span>获取已发布流程节点</span></a></h3><p><code>getPublishByFlowCode(flowCode)</code>：根据流程编码获取已发布流程节点集合</p><h3 id="获取前置节点" tabindex="-1"><a class="header-anchor" href="#获取前置节点"><span>获取前置节点</span></a></h3><p><code>previousNodeList(nodeId)</code>：根据节点id获取下所有的前置节点集合</p><ul><li>nodeId: 节点id [必传]</li></ul><h3 id="获取前置节点-1" tabindex="-1"><a class="header-anchor" href="#获取前置节点-1"><span>获取前置节点</span></a></h3><p><code>previousNodeList(definitionId, nowNodeCode)</code>：根据流程定义id和当前节点code获取所有的前置节点集合</p><ul><li>definitionId: 流程定义id [必传]</li><li>nowNodeCode: 当前节点code [必传]</li></ul><h3 id="获取后置节点" tabindex="-1"><a class="header-anchor" href="#获取后置节点"><span>获取后置节点</span></a></h3><p><code>suffixNodeList(nodeId)</code>：根据节点id获取下所有的后置节点集合</p><ul><li>nodeId: 节点id [必传]</li></ul><h3 id="获取后置节点-1" tabindex="-1"><a class="header-anchor" href="#获取后置节点-1"><span>获取后置节点</span></a></h3><p><code>suffixNodeList(definitionId, nowNodeCode)</code>：根据流程定义id和当前节点code获取所有的后置节点集合</p><ul><li>definitionId: 流程定义id [必传]</li><li>nowNodeCode: 当前节点code [必传]</li><li></li></ul><h3 id="获取后置置节点-含过滤" tabindex="-1"><a class="header-anchor" href="#获取后置置节点-含过滤"><span>获取后置置节点-含过滤</span></a></h3><p><code>getNextNodeList(definitionId, nowNodeCode, anyNodeCode, skipType, variable)</code>：根据流程定义和当前节点code获取下一节点,如是网关跳过取下一节点,并行网关返回多个节点</p><ul><li>definitionId: 流程定义id [必传]</li><li>nowNodeCode: 当前节点code [必传]</li><li>skipType: 跳转类型（PASS审批通过 REJECT退回） [必传]</li><li>anyNodeCode: anyNodeCode不为空，则可跳转anyNodeCode节点（优先级最高） [按需传输]</li><li>variable: 流程变量,下一个节点是网关需要判断跳转条件,并行网关返回多个节点 [按需传输]</li></ul><h2 id="histaskservice历史记录" tabindex="-1"><a class="header-anchor" href="#histaskservice历史记录"><span>HisTaskService历史记录</span></a></h2><h3 id="根据任务id和协作类型查询" tabindex="-1"><a class="header-anchor" href="#根据任务id和协作类型查询"><span>根据任务id和协作类型查询</span></a></h3><p><code>listByTaskIdAndCooperateTypes(taskId, Integer... cooperateTypes)</code>：根据任务id和协作类型查询</p><ul><li>taskId: taskId [必传]</li><li>cooperateTypes: 协作类型集合 [按需传输]</li></ul><h3 id="根据实例id和节点编码查询" tabindex="-1"><a class="header-anchor" href="#根据实例id和节点编码查询"><span>根据实例Id和节点编码查询</span></a></h3><p><code>getByInsAndNodeCodes(instanceId, nodeCodes)</code>：根据实例Id和节点编码查询</p><ul><li>instanceId: 实例Id [必传]</li><li>nodeCodes: 节点编码 [按需传输]</li></ul><h3 id="根据流程实例ids删除" tabindex="-1"><a class="header-anchor" href="#根据流程实例ids删除"><span>根据流程实例Ids删除</span></a></h3><p><code>deleteByInsIds(instanceIds)</code>：根据流程实例Ids删除</p><h2 id="公共api接口" tabindex="-1"><a class="header-anchor" href="#公共api接口"><span>公共api接口</span></a></h2><h3 id="根据id查询" tabindex="-1"><a class="header-anchor" href="#根据id查询"><span>根据id查询</span></a></h3><p><code>getById(id)</code>：根据id查询</p><ul><li>id: 主键</li></ul><h3 id="根据ids主键集合查询" tabindex="-1"><a class="header-anchor" href="#根据ids主键集合查询"><span>根据ids主键集合查询</span></a></h3><p><code>getByIds(ids)</code>：根据ids主键集合查询</p><ul><li>ids: 主键集合</li></ul><h3 id="分页查询" tabindex="-1"><a class="header-anchor" href="#分页查询"><span>分页查询</span></a></h3><p><code>getById(entity, page)</code>：分页查询</p><ul><li>entity: 查询实体</li><li>page: 分页对象，支持设置排序字段</li></ul><h3 id="查询列表" tabindex="-1"><a class="header-anchor" href="#查询列表"><span>查询列表</span></a></h3><p><code>list(entity)</code>：查询列表</p><ul><li>entity: 查询实体</li></ul><h3 id="查询列表-可排序" tabindex="-1"><a class="header-anchor" href="#查询列表-可排序"><span>查询列表，可排序</span></a></h3><p><code>list(entity, query)</code>：查询列表，可排序</p><ul><li>entity: 查询实体</li><li>query: 查询代理层处理，支持设置排序字段</li></ul><h3 id="查询一条记录" tabindex="-1"><a class="header-anchor" href="#查询一条记录"><span>查询一条记录</span></a></h3><p><code>getOne(entity)</code>：查询一条记录</p><ul><li>entity 查询实体</li></ul><h3 id="获取总数量" tabindex="-1"><a class="header-anchor" href="#获取总数量"><span>获取总数量</span></a></h3><p><code>selectCount(entity)</code>：获取总数量</p><ul><li>entity: 查询实体</li></ul><h3 id="判断是否存在" tabindex="-1"><a class="header-anchor" href="#判断是否存在"><span>判断是否存在</span></a></h3><p><code>exists(entity)</code>：判断是否存在</p><ul><li>entity: 查询实体</li></ul><h3 id="新增" tabindex="-1"><a class="header-anchor" href="#新增"><span>新增</span></a></h3><p><code>save(entity)</code>：新增</p><ul><li>entity: 实体</li></ul><h3 id="根据id修改" tabindex="-1"><a class="header-anchor" href="#根据id修改"><span>根据id修改</span></a></h3><p><code>updateById(entity)</code>：根据id修改</p><ul><li>entity: 实体</li></ul><h3 id="根据id删除" tabindex="-1"><a class="header-anchor" href="#根据id删除"><span>根据id删除</span></a></h3><p><code>removeById(id)</code>：根据id删除</p><ul><li>id: 实体</li></ul><h3 id="根据entity删除" tabindex="-1"><a class="header-anchor" href="#根据entity删除"><span>根据entity删除</span></a></h3><p><code>remove(entity)</code>：根据entity删除</p><ul><li>entity: 实体</li></ul><h3 id="根据ids批量删除" tabindex="-1"><a class="header-anchor" href="#根据ids批量删除"><span>根据ids批量删除</span></a></h3><p><code>removeByIds(ids)</code>：根据ids批量删除</p><ul><li>ids: 实体</li></ul><h3 id="批量新增" tabindex="-1"><a class="header-anchor" href="#批量新增"><span>批量新增</span></a></h3><p><code>saveBatch(list)</code>：批量新增</p><ul><li>list: 实体集合</li></ul><h3 id="批量新增-1" tabindex="-1"><a class="header-anchor" href="#批量新增-1"><span>批量新增</span></a></h3><p><code>saveBatch(list, batchSize)</code>：批量新增</p><ul><li>list: 需要插入的集合数据</li><li>batchSize: 插入大小</li></ul><h3 id="批量更新" tabindex="-1"><a class="header-anchor" href="#批量更新"><span>批量更新</span></a></h3><p><code>updateBatch(list)</code>：批量更新</p><ul><li>list: 集合数据</li></ul><h3 id="id设置正序排列" tabindex="-1"><a class="header-anchor" href="#id设置正序排列"><span>id设置正序排列</span></a></h3><p><code>orderById()</code>：id设置正序排列</p><h3 id="创建时间设置正序排列" tabindex="-1"><a class="header-anchor" href="#创建时间设置正序排列"><span>创建时间设置正序排列</span></a></h3><p><code>orderByCreateTime()</code>：创建时间设置正序排列</p><h3 id="更新时间设置正序排列" tabindex="-1"><a class="header-anchor" href="#更新时间设置正序排列"><span>更新时间设置正序排列</span></a></h3><p><code>orderByUpdateTime()</code>：更新时间设置正序排列</p><h3 id="设置正序排列" tabindex="-1"><a class="header-anchor" href="#设置正序排列"><span>设置正序排列</span></a></h3><p><code>orderByAsc(orderByField)</code>：设置正序排列</p><ul><li>orderByField: 排序字段</li></ul><h3 id="设置倒序排列" tabindex="-1"><a class="header-anchor" href="#设置倒序排列"><span>设置倒序排列</span></a></h3><p><code>orderByDesc(orderByField)</code>：设置倒序排列</p><ul><li>orderByField: 排序字段</li></ul><h3 id="用户自定义排序方案" tabindex="-1"><a class="header-anchor" href="#用户自定义排序方案"><span>用户自定义排序方案</span></a></h3><p><code>orderBy(orderByField)</code>：用户自定义排序方案</p><ul><li>orderByField: 排序字段</li></ul>',186)]))}const p=d(l,[["render",r],["__file","api.html.vue"]]),f=JSON.parse('{"path":"/master/primary/api.html","title":"核心接口api","lang":"zh-CN","frontmatter":{"description":"核心接口api warm-flow Logo warm-flow Logo warm-flow Logo DefService流程定义 导入流程输入流 importIs(is)：流程定义的输入流 导入流程json字符串 importJson(defStr)：流程定义defJson的json字符串 导入流程json对象 importDef(defJson...","head":[["meta",{"property":"og:url","content":"https://gitee.com/warm_4/warm-flow-doc/master/primary/api.html"}],["meta",{"property":"og:site_name","content":"Dromara Warm-Flow"}],["meta",{"property":"og:title","content":"核心接口api"}],["meta",{"property":"og:description","content":"核心接口api warm-flow Logo warm-flow Logo warm-flow Logo DefService流程定义 导入流程输入流 importIs(is)：流程定义的输入流 导入流程json字符串 importJson(defStr)：流程定义defJson的json字符串 导入流程json对象 importDef(defJson..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-07T08:30:26.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-07T08:30:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"核心接口api\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-07T08:30:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dromara Warm-Flow工作流\\",\\"url\\":\\"https://gitee.com/warm_4/warm-flow-doc\\"}]}"]]},"git":{"createdTime":1718084392000,"updatedTime":1741336226000,"contributors":[{"name":"笨小孩","username":"笨小孩","email":"290631660@qq.com","commits":4},{"name":"闵柳华","username":"闵柳华","email":"290631660@qq.com","commits":1},{"name":"warm","username":"warm","email":"290631660@qq.com","commits":30}]},"readingTime":{"minutes":9.8,"words":2940},"filePathRelative":"master/primary/api.md","localizedDate":"2024年6月11日","autoDesc":true,"excerpt":"\\n<div class=\\"wwads-cn wwads-vertical wwads-sticky\\" data-id=\\"349\\" style=\\"max-width:180px\\"></div>\\n<div class=\\"between-header\\">\\n    <a href=\\"https://gitee.com/dromara/warm-flow\\">\\n        <img src=\\"/ggw/bewteenone.png\\" alt=\\"warm-flow Logo\\">\\n    </a>\\n</div>\\n<div style=\\"display: flex; \\">\\n    <div class=\\"between-left\\">\\n        <a href=\\"https://gitee.com/dromara/warm-flow\\">\\n            <img src=\\"/ggw/bewteentwo.png\\" alt=\\"warm-flow Logo\\">\\n        </a>\\n    </div>\\n    <div class=\\"between-right\\">\\n        <a href=\\"https://gitee.com/dromara/warm-flow\\">\\n            <img src=\\"/ggw/bewteentwo.png\\" alt=\\"warm-flow Logo\\">\\n        </a>\\n    </div>\\n</div>"}');export{p as comp,f as data};
