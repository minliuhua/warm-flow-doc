import{_ as s,e as a,p as e,l as n}from"./app-e3DKOkdu.js";const t={};function h(l,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h3 id="dromara-warmflow工作流动态指定办理人" tabindex="-1"><a class="header-anchor" href="#dromara-warmflow工作流动态指定办理人"><span>Dromara WarmFlow工作流动态指定办理人</span></a></h3><h5 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景：</span></a></h5><p>审批任务的办理人，通常是在流程设计器中预先设定好办理人，那如果想要在办理过程中指定办理人呢？<br> 那不得不提一下本次的主角，来自<a href="https://dromara.org.cn/" target="_blank" rel="noopener noreferrer">Dromara组织</a>的<a href="https://gitee.com/dromara/warm-flow" target="_blank" rel="noopener noreferrer">WarmFlow工作流</a>，通过他的办理人变量表达式就能很好解决此问题。</p><h5 id="解决思路" tabindex="-1"><a class="header-anchor" href="#解决思路"><span>解决思路</span></a></h5><ul><li>1、流程设计时，需要动态指定办理人的节点，配置办理人变量表达式<code>\${handler1}</code></li><li>2、当上一个任务办理时，在流程变量中传入<code>\${handler1}</code>的值</li><li>3、办理完成会生成本节点任务，即可替换完成</li></ul><img src="https://foruda.gitee.com/images/1734589294761157636/ac74e327_2218307.png" width="500"><p>后端代码设置变量</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 流程变量</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> variable </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">variable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;handler1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;100&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">flowParams</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">variable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(variable);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Instance</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> instance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> insService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">skipByInsId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">testLeave</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInstanceId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), flowParams);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="高级玩法" tabindex="-1"><a class="header-anchor" href="#高级玩法"><span>高级玩法</span></a></h5><ul><li>支持动态指定一群人</li><li>支持spel表达式</li><li>支持表达式扩展</li></ul><p>把如上代码<code>&quot;100&quot;</code>改成<code>Arrays.asList(4, &quot;5&quot;, 100L)</code>，就可以动态指定一群人</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 流程变量</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> variable </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">variable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;handler1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">asList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;5&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">flowParams</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">variable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(variable);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Instance</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> instance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> insService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">skipByInsId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">testLeave</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInstanceId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), flowParams);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h5><p>是不是通过<a href="https://gitee.com/dromara/warm-flow" target="_blank" rel="noopener noreferrer">WarmFlow工作流</a>可以很简单的管理你的审批业务呢，还不快快加入<sup>v</sup></p><p>另外<a href="https://dromara.org.cn/" target="_blank" rel="noopener noreferrer">Dromara组织</a>还有大量好用的项目，欢迎评鉴</p>`,15)]))}const p=s(t,[["render",h],["__file","6.html.vue"]]),k=JSON.parse('{"path":"/v1.3.5/other/news/experience/6.html","title":"","lang":"zh-CN","frontmatter":{"description":"Dromara WarmFlow工作流动态指定办理人 背景： 审批任务的办理人，通常是在流程设计器中预先设定好办理人，那如果想要在办理过程中指定办理人呢？ 那不得不提一下本次的主角，来自Dromara组织的WarmFlow工作流，通过他的办理人变量表达式就能很好解决此问题。 解决思路 1、流程设计时，需要动态指定办理人的节点，配置办理人变量表达式${h...","head":[["meta",{"property":"og:url","content":"https://gitee.com/warm_4/warm-flow-doc/v1.3.5/other/news/experience/6.html"}],["meta",{"property":"og:site_name","content":"Dromara Warm-Flow"}],["meta",{"property":"og:description","content":"Dromara WarmFlow工作流动态指定办理人 背景： 审批任务的办理人，通常是在流程设计器中预先设定好办理人，那如果想要在办理过程中指定办理人呢？ 那不得不提一下本次的主角，来自Dromara组织的WarmFlow工作流，通过他的办理人变量表达式就能很好解决此问题。 解决思路 1、流程设计时，需要动态指定办理人的节点，配置办理人变量表达式${h..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-19T07:10:12.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-19T07:10:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-19T07:10:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dromara Warm-Flow工作流\\",\\"url\\":\\"https://gitee.com/warm_4/warm-flow-doc\\"}]}"]]},"git":{"createdTime":1733992545000,"updatedTime":1734592212000,"contributors":[{"name":"warm","username":"warm","email":"290631660@qq.com","commits":4}]},"readingTime":{"minutes":1.15,"words":344},"filePathRelative":"v1.3.5/other/news/experience/6.md","localizedDate":"2024年12月12日","autoDesc":true,"excerpt":"<h3>Dromara WarmFlow工作流动态指定办理人</h3>\\n<h5>背景：</h5>\\n<p>审批任务的办理人，通常是在流程设计器中预先设定好办理人，那如果想要在办理过程中指定办理人呢？<br>\\n那不得不提一下本次的主角，来自<a href=\\"https://dromara.org.cn/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Dromara组织</a>的<a href=\\"https://gitee.com/dromara/warm-flow\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">WarmFlow工作流</a>，通过他的办理人变量表达式就能很好解决此问题。</p>"}');export{p as comp,k as data};
